import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.core5.util.TimeValue;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.aws.messaging.listener.annotation.SqsListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestClient;
import org.springframework.web.service.annotation.HttpExchange;
import org.springframework.web.service.annotation.PostExchange;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.service.invoker.HttpServiceProxyFactory;
import org.springframework.web.client.support.RestClientAdapter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Configuration
public class RestClientConfig {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(RestClientConfig.class);
    
    @Bean("optimizedRestClient")
    public RestClient optimizedRestClient() {
        // Create custom HTTP client with connection pooling
        HttpComponentsClientHttpRequestFactory factory = createOptimizedRequestFactory();
        
        return RestClient.builder()
            .baseUrl("https://your-tsys-endpoint.com")
            .requestFactory(factory)
            .defaultHeader("Content-Type", "application/json")
            .defaultHeader("Accept", "*/*")
            .build();
    }
    
    private HttpComponentsClientHttpRequestFactory createOptimizedRequestFactory() {
        // Configure connection pool manager first
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(100);              // Total connections across all hosts
        connectionManager.setDefaultMaxPerRoute(50);     // Connections per TSYS endpoint
        
        // Configure the HTTP client with connection manager
        CloseableHttpClient httpClient = HttpClients.custom()
            .setConnectionManager(connectionManager)
            .setDefaultRequestConfig(RequestConfig.custom()
                .setConnectTimeout(TimeValue.ofSeconds(5))      // 5 seconds to establish connection
                .setResponseTimeout(TimeValue.ofSeconds(30))    // 30 seconds for TSYS to respond
                .build())
            .build();
        
        HttpComponentsClientHttpRequestFactory factory = 
            new HttpComponentsClientHttpRequestFactory();
        factory.setHttpClient(httpClient);
        
        return factory;
    }
}

@Service
public class CardProcessingService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(CardProcessingService.class);
    private final TokenizationApi tokenizationApi;
    
    public CardProcessingService(@Qualifier("optimizedRestClient") RestClient restClient) {
        RestClientAdapter adapter = RestClientAdapter.create(restClient);
        HttpServiceProxyFactory factory = HttpServiceProxyFactory.builderFor(adapter).build();
        this.tokenizationApi = factory.createClient(TokenizationApi.class);
    }
    
    @SqsListener(value = "${sqs.queue.name}", 
                 maxConcurrentMessages = 40,
                 maxMessagesPerPoll = 40,
                 pollTimeoutSeconds = 20,
                 visibilityTimeoutSeconds = 300)
    public void process(String payload) {
        try {
            LOGGER.info("Processing card creation request");
            
            // Simple retry logic - let the load balancer do its job!
            String response = processCardWithSimpleRetry(payload);
            
            LOGGER.info("Card processed successfully");
            
        } catch (Exception e) {
            LOGGER.error("Final failure processing card after retries", e);
            throw e; // Let SQS handle message retry
        }
    }
    
    private String processCardWithSimpleRetry(String payload) {
        int maxAttempts = 3;
        Exception lastException = null;
        
        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                LOGGER.debug("Processing attempt {} of {}", attempt, maxAttempts);
                
                ResponseEntity<String> response = tokenizationApi.createToken(payload);
                
                if (response.getStatusCode().is2xxSuccessful()) {
                    LOGGER.info("Success on attempt {}", attempt);
                    return response.getBody();
                }
                
                // Unexpected non-2xx response
                throw new RuntimeException("Unexpected response: " + response.getStatusCode());
                
            } catch (HttpServerErrorException e) {
                // 5xx errors - worth retrying, load balancer will route differently
                LOGGER.warn("Attempt {} failed with HTTP {}: {}", 
                           attempt, e.getStatusCode(), e.getMessage());
                lastException = e;
                
                if (attempt == maxAttempts) {
                    throw e; // Final attempt failed
                }
                
                // Simple 1-second pause - just enough for LB to mark instance unhealthy
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Interrupted during retry", ie);
                }
                
            } catch (HttpClientErrorException e) {
                // 4xx errors - don't retry, something is wrong with our request
                LOGGER.error("Client error - no retry: HTTP {}: {}", 
                            e.getStatusCode(), e.getMessage());
                throw e;
                
            } catch (ResourceAccessException e) {
                // Network/timeout issues - retry
                LOGGER.warn("Network error on attempt {}: {}", attempt, e.getMessage());
                lastException = e;
                
                if (attempt == maxAttempts) {
                    throw e;
                }
                
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Interrupted during retry", ie);
                }
            }
        }
        
        // Should never reach here, but just in case
        throw new RuntimeException("All retries exhausted", lastException);
    }
}

// Your HTTP interface stays beautifully simple
@HttpExchange
public interface TokenizationApi {
    
    @PostExchange(value = "/platform/tokenexternal/tokens/create",
                  contentType = "application/json",
                  accept = "*/*")
    <T,V> ResponseEntity<T> createToken(@RequestBody V request);
}
