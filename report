<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enterprise Validation Framework</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        .header {
            border-bottom: 3px solid #0066cc;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        h1 {
            color: #0066cc;
            margin-bottom: 10px;
        }
        h2 {
            color: #004499;
            border-left: 4px solid #0066cc;
            padding-left: 15px;
            margin-top: 30px;
        }
        h3 {
            color: #0066cc;
            margin-top: 25px;
        }
        .highlight-box {
            background: #f8f9ff;
            border: 1px solid #e1e5f2;
            border-radius: 6px;
            padding: 20px;
            margin: 20px 0;
        }
        .value-prop {
            background: #e8f5e8;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 15px 0;
        }
        .limitation {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            margin: 15px 0;
        }
        .code-block {
            background: #f6f8fa;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
        }
        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        .capability-list {
            list-style: none;
            padding: 0;
        }
        .capability-list li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .capability-list li:before {
            content: "‚úÖ ";
            margin-right: 8px;
        }
        .limitation-list {
            list-style: none;
            padding: 0;
        }
        .limitation-list li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .limitation-list li:before {
            content: "üîç ";
            margin-right: 8px;
        }
        .architecture-flow {
            background: #f8f9ff;
            padding: 20px;
            border-radius: 6px;
            margin: 20px 0;
            text-align: center;
        }
        .flow-step {
            display: inline-block;
            background: #0066cc;
            color: white;
            padding: 10px 15px;
            margin: 5px;
            border-radius: 4px;
            font-size: 14px;
        }
        .arrow {
            font-size: 20px;
            color: #0066cc;
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Enterprise Validation Framework</h1>
        <p><strong>Location-Aware Validation Error Resolution with OpenAPI Integration</strong></p>
        <p><em>A standardized approach to validation error handling across all microservices</em></p>
    </div>

```
<h2>Executive Summary</h2>
<div class="highlight-box">
    <p>Our organization's APIs were returning inconsistent, developer-focused validation errors that provided poor user experience and required significant maintenance effort across teams. This framework provides a unified solution that transforms raw Spring validation failures into consistent, business-friendly error responses with proper internationalization support.</p>
    
    <div class="value-prop">
        <strong>Business Impact:</strong> Teams can now focus on business logic while automatically getting enterprise-grade error handling that maintains consistency across all services and provides clear, actionable feedback to API consumers.
    </div>
</div>

<h2>Problem Statement</h2>
<div class="two-column">
    <div>
        <h3>Before: Inconsistent Error Handling</h3>
        <ul>
            <li>Each service implemented validation differently</li>
            <li>Error messages were technical and user-unfriendly</li>
            <li>No standard error codes or format</li>
            <li>Users couldn't tell if errors were in headers, body, or parameters</li>
            <li>Multiple round-trips required to identify all issues</li>
            <li>No internationalization support</li>
        </ul>
    </div>
    <div>
        <h3>After: Unified Error Experience</h3>
        <ul class="capability-list">
            <li>Consistent error format across all APIs</li>
            <li>Business-friendly error codes and messages</li>
            <li>Location-aware error reporting</li>
            <li>Multiple validation errors shown together</li>
            <li>Automatic OpenAPI constraint integration</li>
            <li>Built-in internationalization support</li>
        </ul>
    </div>
</div>

<h2>Technical Architecture</h2>
<div class="architecture-flow">
    <div class="flow-step">API Request</div>
    <span class="arrow">‚Üí</span>
    <div class="flow-step">Spring Validation</div>
    <span class="arrow">‚Üí</span>
    <div class="flow-step">ValidationErrorResolver</div>
    <span class="arrow">‚Üí</span>
    <div class="flow-step">Business Error Response</div>
</div>

<h3>Core Components</h3>
<div class="highlight-box">
    <h4>ValidationErrorResolver</h4>
    <p>Central orchestrator that handles multiple exception types and converts them into standardized error responses with proper business codes and messages.</p>

    <h4>ValidationProperties</h4>
    <p>YAML-based configuration that maps validation constraints to business error codes and message keys, enabling deployment-free updates.</p>

    <h4>Location Detection</h4>
    <p>Automatically determines whether validation failures occurred in request body, headers, query parameters, or path parameters.</p>

    <h4>MessageSource Integration</h4>
    <p>Leverages Spring's internationalization framework to provide localized error messages based on request locale.</p>
</div>

<h2>Current Capabilities</h2>
<div class="highlight-box">
    <ul class="capability-list">
        <li><strong>Structural Validation Aggregation:</strong> Shows multiple validation errors together for mandatory, min/max length, decimal ranges, and pattern violations</li>
        <li><strong>OpenAPI Integration:</strong> Automatically uses constraints defined in OpenAPI specifications via code generation</li>
        <li><strong>Location-Aware Messaging:</strong> Clearly indicates whether errors are in request body, headers, query parameters, or path variables</li>
        <li><strong>Business Error Codes:</strong> Translates technical constraint violations into meaningful business error codes (10001, 10100, etc.)</li>
        <li><strong>Internationalization Ready:</strong> Supports multiple locales with proper message formatting</li>
        <li><strong>Exception Type Coverage:</strong> Handles MethodArgumentNotValidException, ConstraintViolationException, and HttpMessageNotReadableException</li>
        <li><strong>Zero Configuration Adoption:</strong> Teams can integrate by adding dependency and configuration - no code changes required</li>
    </ul>
</div>

<h3>Example Error Response</h3>
<div class="code-block">
```

{
‚Äútitle‚Äù: ‚ÄúValidation Error‚Äù,
‚ÄúhttpStatus‚Äù: 400,
‚ÄútraceId‚Äù: ‚Äúabc123‚Äù,
‚ÄúrequestId‚Äù: ‚Äúreq-456‚Äù,
‚Äúcontext‚Äù: [
{
‚Äúcode‚Äù: 10002,
‚Äúmessage‚Äù: ‚ÄúRequest body field ‚ÄòcustomerName‚Äô length must be greater than 10 characters‚Äù
},
{
‚Äúcode‚Äù: 10100,
‚Äúmessage‚Äù: ‚ÄúRequest body field ‚Äòamount‚Äô value must be greater than minimum supported value‚Äù
}
]
}
</div>

```
<h2>Known Limitations & Open Items</h2>
<div class="limitation">
    <h3>Enum Validation Sequencing</h3>
    <p><strong>Issue:</strong> When invalid enum values are provided, HttpMessageNotReadableException is thrown during JSON deserialization, preventing other bean validations from executing.</p>
    <p><strong>Impact:</strong> Users see enum errors first, then must fix and resubmit to see other validation issues.</p>
    <p><strong>Scope:</strong> Affects scenarios where enum violations occur alongside other field validation errors.</p>
</div>

<div class="limitation">
    <h3>Multi-Layer Validation Coordination</h3>
    <p><strong>Issue:</strong> Different validation layers (header validation, body constraint violations) execute independently and cannot be aggregated in a single response.</p>
    <p><strong>Impact:</strong> Users may need multiple submission attempts to identify all validation issues when problems span headers and body content.</p>
    <p><strong>Example:</strong> Missing required header + body field constraint violation = two separate error responses.</p>
</div>

<div class="limitation">
    <h3>Exception Type Variations</h3>
    <p><strong>Issue:</strong> Spring framework throws either ConstraintViolationException or MethodArgumentNotValidException for similar scenarios, with no predictable pattern.</p>
    <p><strong>Impact:</strong> Requires handling both exception types even though they represent essentially the same validation failure.</p>
    <p><strong>Status:</strong> Currently handled through unified exception processing, but adds complexity.</p>
</div>

<h2>Integration Guide</h2>
<h3>For Development Teams</h3>
<div class="highlight-box">
    <h4>Step 1: Add Dependency</h4>
    <div class="code-block">
```

<dependency>
<groupId>com.company</groupId>
<artifactId>validation-framework</artifactId>
<version>1.0.0</version>
</dependency>
</div>

```
    <h4>Step 2: Include Configuration</h4>
    <div class="code-block">
```

# application.yml

validation:
errors:
mandatory:
code: ‚Äú10001‚Äù
message-key: ‚Äúvalidation.mandatory‚Äù
# ‚Ä¶ other error configurations
</div>

```
    <h4>Step 3: Define OpenAPI Constraints</h4>
    <div class="code-block">
```

# Your OpenAPI specification

CustomerRequest:
properties:
name:
type: string
minLength: 5
maxLength: 50
email:
type: string
format: email
</div>

```
    <h4>Step 4: Generate and Use Models</h4>
    <p>Use OpenAPI code generation to create models with embedded validation annotations. The framework will automatically provide proper error responses for any constraint violations.</p>
</div>

<h2>Configuration Reference</h2>
<div class="highlight-box">
    <h3>Error Code Mappings</h3>
    <ul>
        <li><strong>10001:</strong> Mandatory field violations (NotNull, NotEmpty, NotBlank)</li>
        <li><strong>10002:</strong> Minimum length violations</li>
        <li><strong>10003:</strong> Maximum length violations</li>
        <li><strong>10100-10102:</strong> Decimal range violations</li>
        <li><strong>10103:</strong> Format violations (Pattern, Email)</li>
        <li><strong>10104:</strong> Invalid value violations (Enum)</li>
        <li><strong>10199:</strong> Default/unknown validation errors</li>
    </ul>

    <h3>Supported Constraint Types</h3>
    <ul>
        <li>Bean Validation: @NotNull, @NotEmpty, @NotBlank, @Size, @Min, @Max, @DecimalMin, @DecimalMax, @Pattern, @Email</li>
        <li>Hibernate Validation: @Length, @Range</li>
        <li>Custom: @ValueOfEnum</li>
        <li>OpenAPI Generated: All constraints from OpenAPI specifications</li>
    </ul>
</div>

<h2>Future Considerations</h2>
<div class="highlight-box">
    <h3>Potential Enhancements</h3>
    <ul class="limitation-list">
        <li><strong>Request Pre-Processing:</strong> Investigate intercepting and parsing requests before standard Spring validation to enable comprehensive error aggregation</li>
        <li><strong>Custom Validation Orchestrator:</strong> Develop a validation coordinator that can run multiple validation phases and aggregate results</li>
        <li><strong>Enhanced Enum Handling:</strong> Explore custom deserializers that can continue validation after enum failures</li>
        <li><strong>Validation Result Caching:</strong> Consider caching validation results for performance optimization in high-throughput scenarios</li>
    </ul>

    <h3>Feedback & Evolution</h3>
    <p>Teams using this framework are encouraged to provide feedback on additional validation scenarios, error message improvements, or configuration enhancements that would benefit their use cases.</p>
</div>

<div class="highlight-box" style="margin-top: 40px; text-align: center;">
    <p><strong>Ready to integrate?</strong> Contact the platform team for implementation guidance and support.</p>
</div>
```

</body>
</html>