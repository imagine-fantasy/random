<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Validation Framework Implementation Architecture</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        .header {
            border-bottom: 3px solid #0066cc;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        h1 {
            color: #0066cc;
            margin-bottom: 10px;
        }
        h2 {
            color: #004499;
            border-left: 4px solid #0066cc;
            padding-left: 15px;
            margin-top: 30px;
        }
        h3 {
            color: #0066cc;
            margin-top: 25px;
        }
        .implementation-box {
            background: #f8f9ff;
            border: 1px solid #e1e5f2;
            border-radius: 6px;
            padding: 20px;
            margin: 20px 0;
        }
        .code-block {
            background: #f6f8fa;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            margin: 15px 0;
        }
        .config-connection {
            background: #e8f5e8;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 15px 0;
            border-radius: 6px;
        }
        .technical-detail {
            background: #e8f4fd;
            border-left: 4px solid #2196f3;
            padding: 15px;
            margin: 15px 0;
            border-radius: 6px;
        }
        .known-issue {
            background: #fff8e1;
            border-left: 4px solid #ff9800;
            padding: 15px;
            margin: 15px 0;
            border-radius: 6px;
        }
        .config-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        .config-table th, .config-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .config-table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        .file-connection {
            background: #f0f8ff;
            border: 2px solid #2196f3;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Payments Platform Validation Framework</h1>
        <p><strong>Implementation Architecture for Location-Aware Error Resolution</strong></p>
        <p><em>Configuration-driven validation error processing with OpenAPI integration</em></p>
    </div>

```
<h2>Implementation Overview</h2>
<div class="implementation-box">
    <p>This framework implements a configuration-driven approach to validation error resolution, transforming Spring's raw validation exceptions into standardized business error responses. The implementation centers around two key configuration files that define error mappings and message templates, orchestrated by the ValidationErrorResolver component.</p>
</div>

<h2>Core Implementation Architecture</h2>

<h3>Main Validation Error Resolution Flow</h3>
<div style="background: #f8f9ff; padding: 30px; border-radius: 12px; margin: 20px 0; overflow-x: auto;">
    <!-- Flow 1: Main Process -->
    <div style="display: flex; align-items: center; justify-content: center; gap: 0; margin-bottom: 30px; min-width: 1000px;">
        <div style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 16px 24px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); font-weight: bold; text-align: center; min-width: 180px;">
            ValidationErrorResolver<br>
            <small style="opacity: 0.9;">Entry Point</small>
        </div>
        
        <div style="width: 0; height: 0; border-left: 20px solid #4CAF50; border-top: 15px solid transparent; border-bottom: 15px solid transparent; margin: 0 -1px;"></div>
        
        <div style="background: linear-gradient(135deg, #2196F3, #1976D2); color: white; padding: 16px 24px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center; min-width: 180px;">
            Extract Constraint Type<br>
            <small style="opacity: 0.9;">@NotNull → "NotNull"</small>
        </div>
        
        <div style="width: 0; height: 0; border-left: 20px solid #2196F3; border-top: 15px solid transparent; border-bottom: 15px solid transparent; margin: 0 -1px;"></div>
        
        <div style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; padding: 16px 24px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center; min-width: 180px;">
            Map via Config<br>
            <small style="opacity: 0.9;">"NotNull" → "mandatory"</small>
        </div>
        
        <div style="width: 0; height: 0; border-left: 20px solid #FF9800; border-top: 15px solid transparent; border-bottom: 15px solid transparent; margin: 0 -1px;"></div>
        
        <div style="background: linear-gradient(135deg, #9C27B0, #7B1FA2); color: white; padding: 16px 24px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center; min-width: 180px;">
            Build Error Context<br>
            <small style="opacity: 0.9;">Code + Message</small>
        </div>
    </div>
</div>

<h2>Configuration File Architecture</h2>

<h3>validation-error-config.yml - The Control Center</h3>
<div class="file-connection">
    <p><strong>Purpose:</strong> Defines the mapping between Spring constraint types and business error configurations, serving as the central control mechanism for error code assignment and message key resolution.</p>
    
    <div class="code-block">
```

validation:
errors:
mandatory:
code: “10001”
message-key: “validation.mandatory”
min-length:
code: “10002”
message-key: “validation.length.min”
max-length:
code: “10003”
message-key: “validation.length.max”
decimal-min:
code: “10100”
message-key: “validation.decimal.min”
decimal-max:
code: “10101”
message-key: “validation.decimal.max”
decimal-range:
code: “10102”
message-key: “validation.decimal.range”
bad-format:
code: “10103”
message-key: “validation.format.invalid”
bad-value:
code: “10104”
message-key: “validation.value.invalid”
default:
code: “10199”
message-key: “validation.default”
constraint-mappings:
“NotNull”: “mandatory”
“NotEmpty”: “mandatory”
“NotBlank”: “mandatory”
“Size.min”: “min-length”
“Length.min”: “min-length”
“Size.max”: “max-length”
“Length.max”: “max-length”
“DecimalMin”: “decimal-min”
“DecimalMax”: “decimal-max”
“Range”: “decimal-range”
“Digits”: “decimal-range”
“Pattern”: “bad-format”
“Email”: “bad-format”
“ValueOfEnum”: “bad-value”
</div>
</div>

```
<h3>messages.properties - The Message Template Repository</h3>
<div class="file-connection">
    <p><strong>Purpose:</strong> Contains internationalized message templates that correspond to the message-key values defined in the YAML configuration, enabling localized error message generation.</p>
    
    <div class="code-block">
```

validation.mandatory={0} must be present
validation.length.min={0} length must be greater than {1} characters
validation.length.max={0} length must be lower than {1} characters
validation.decimal.min={0} value must be greater than {1}
validation.decimal.max={0} value must be lower than {1}
validation.decimal.range={0} value must be in the expected range
validation.format.invalid={0} value must be in the expected format
validation.value.invalid={0} value must have the expected value
validation.default=Error Occurred
</div>
</div>

```
<h2>Configuration Integration Flow</h2>

<h3>How ValidationErrorResolver Orchestrates the Configuration Files</h3>
<div style="background: #f5f8f0; padding: 30px; border-radius: 12px; margin: 20px 0;">
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; align-items: start;">
        
        <!-- Left side: Process flow -->
        <div>
            <h4 style="color: #4CAF50; margin-bottom: 15px;">Step-by-Step Processing</h4>
            <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid #4CAF50;">
                <strong>1. Constraint Extraction</strong><br>
                <code>FieldError.getCode()</code> → "NotNull"
            </div>
            <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid #2196F3;">
                <strong>2. Constraint Mapping Lookup</strong><br>
                <code>constraint-mappings["NotNull"]</code> → "mandatory"
            </div>
            <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid #FF9800;">
                <strong>3. Error Config Retrieval</strong><br>
                <code>errors["mandatory"]</code> → {code: "10001", message-key: "validation.mandatory"}
            </div>
            <div style="background: white; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid #9C27B0;">
                <strong>4. Message Resolution</strong><br>
                <code>messageSource.getMessage("validation.mandatory", args, locale)</code>
            </div>
        </div>
        
        <!-- Right side: Configuration binding -->
        <div>
            <h4 style="color: #2196F3; margin-bottom: 15px;">Configuration Binding</h4>
            <div class="code-block" style="font-size: 12px;">
```

@ConfigurationProperties(prefix = “validation”)
public class ValidationProperties {
private Map<String, ErrorConfig> errors;
private Map<String, String> constraintMappings;

```
@Data
public static class ErrorConfig {
    private String code;
    private String messageKey;
}
```

}
</div>

```
            <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                <strong>Auto-wiring Integration:</strong><br>
                <span style="font-size: 14px;">Spring automatically binds YAML configuration to ValidationProperties, making constraint mappings and error configurations accessible to ValidationErrorResolver at runtime.</span>
            </div>
        </div>
    </div>
</div>

<h3>Exception Type Processing Implementation</h3>
<div style="background: #f0f8ff; padding: 30px; border-radius: 12px; margin: 20px 0;">
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 25px; margin-top: 20px;">
        <!-- Path 1 -->
        <div style="text-align: center;">
            <div style="background: linear-gradient(135deg, #2196F3, #1976D2); color: white; padding: 14px 20px; border-radius: 12px; margin-bottom: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                MethodArgumentNotValidException
            </div>
            
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #2196F3, #E3F2FD); margin: 0 auto;"></div>
            
            <div style="background: #E3F2FD; padding: 18px; border-radius: 12px; border: 3px solid #2196F3; text-align: left;">
                <div style="font-weight: bold; margin-bottom: 10px; color: #1976D2;">Processing Implementation:</div>
                <div style="font-size: 14px; line-height: 1.6;">
                    ✓ <code>ex.getBindingResult().getFieldErrors()</code><br>
                    ✓ Stream each FieldError through resolver<br>
                    ✓ Apply constraint mapping + message resolution<br>
                    ✓ Collect into List&lt;ErrorContext&gt;
                </div>
            </div>
        </div>
        
        <!-- Path 2 -->
        <div style="text-align: center;">
            <div style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; padding: 14px 20px; border-radius: 12px; margin-bottom: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                HttpMessageNotReadableException
            </div>
            
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #FF9800, #FFF3E0); margin: 0 auto;"></div>
            
            <div style="background: #FFF3E0; padding: 18px; border-radius: 12px; border: 3px solid #FF9800; text-align: left;">
                <div style="font-weight: bold; margin-bottom: 10px; color: #F57C00;">Synthetic FieldError Creation:</div>
                <div style="font-size: 14px; line-height: 1.6;">
                    • Analyze <code>InvalidFormatException</code><br>
                    • Determine target type (enum vs format)<br>
                    • Create artificial FieldError object<br>
                    • Process through same resolution flow
                </div>
            </div>
        </div>
        
        <!-- Path 3 -->
        <div style="text-align: center;">
            <div style="background: linear-gradient(135deg, #9C27B0, #7B1FA2); color: white; padding: 14px 20px; border-radius: 12px; margin-bottom: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                ConstraintViolationException
            </div>
            
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #9C27B0, #F3E5F5); margin: 0 auto;"></div>
            
            <div style="background: #F3E5F5; padding: 18px; border-radius: 12px; border: 3px solid #9C27B0; text-align: left;">
                <div style="font-weight: bold; margin-bottom: 10px; color: #7B1FA2;">Constraint Violation Processing:</div>
                <div style="font-size: 14px; line-height: 1.6;">
                    ✓ Extract <code>ConstraintViolation</code> objects<br>
                    ✓ Convert to FieldError equivalent<br>
                    ✓ Apply same mapping logic<br>
                    ✓ Unified error aggregation
                </div>
            </div>
        </div>
    </div>
</div>

<h2>Location Detection Implementation</h2>
<div style="background: #fff8f0; padding: 30px; border-radius: 12px; margin: 20px 0;">
    <div style="text-align: center; margin-bottom: 30px;">
        <div style="background: linear-gradient(135deg, #795548, #5D4037); color: white; padding: 16px 32px; border-radius: 12px; display: inline-block; font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            Spring Parameter Annotation Analysis
        </div>
    </div>
    
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; gap: 20px; min-height: 150px;">
        <!-- PATH -->
        <div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
            <div style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 12px 18px; border-radius: 10px; margin-bottom: 10px; box-shadow: 0 3px 6px rgba(0,0,0,0.1); font-weight: bold;">
                @PathVariable
            </div>
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #4CAF50, #C8E6C9);"></div>
            <div style="background: #C8E6C9; padding: 10px 16px; border-radius: 8px; font-weight: bold; color: #2E7D32; border: 2px solid #4CAF50;">
                LocationEnum.PATH
            </div>
        </div>
        
        <!-- BODY -->
        <div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
            <div style="background: linear-gradient(135deg, #2196F3, #1976D2); color: white; padding: 12px 18px; border-radius: 10px; margin-bottom: 10px; box-shadow: 0 3px 6px rgba(0,0,0,0.1); font-weight: bold;">
                @RequestBody
            </div>
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #2196F3, #BBDEFB);"></div>
            <div style="background: #BBDEFB; padding: 10px 16px; border-radius: 8px; font-weight: bold; color: #1565C0; border: 2px solid #2196F3;">
                LocationEnum.BODY
            </div>
        </div>
        
        <!-- QUERY -->
        <div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
            <div style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; padding: 12px 18px; border-radius: 10px; margin-bottom: 10px; box-shadow: 0 3px 6px rgba(0,0,0,0.1); font-weight: bold;">
                @RequestParam
            </div>
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #FF9800, #FFE0B2);"></div>
            <div style="background: #FFE0B2; padding: 10px 16px; border-radius: 8px; font-weight: bold; color: #E65100; border: 2px solid #FF9800;">
                LocationEnum.QUERY
            </div>
        </div>
        
        <!-- HEADER -->
        <div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
            <div style="background: linear-gradient(135deg, #9C27B0, #7B1FA2); color: white; padding: 12px 18px; border-radius: 10px; margin-bottom: 10px; box-shadow: 0 3px 6px rgba(0,0,0,0.1); font-weight: bold;">
                @RequestHeader
            </div>
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #9C27B0, #E1BEE7);"></div>
            <div style="background: #E1BEE7; padding: 10px 16px; border-radius: 8px; font-weight: bold; color: #6A1B9A; border: 2px solid #9C27B0;">
                LocationEnum.HEADER
            </div>
        </div>
        
        <!-- DEFAULT -->
        <div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
            <div style="background: linear-gradient(135deg, #607D8B, #455A64); color: white; padding: 12px 18px; border-radius: 10px; margin-bottom: 10px; box-shadow: 0 3px 6px rgba(0,0,0,0.1); font-weight: bold;">
                No Annotation
            </div>
            <div style="width: 4px; height: 20px; background: linear-gradient(to bottom, #607D8B, #CFD8DC);"></div>
            <div style="background: #CFD8DC; padding: 10px 16px; border-radius: 8px; font-weight: bold; color: #37474F; border: 2px solid #607D8B;">
                LocationEnum.BODY
            </div>
        </div>
    </div>
</div>

<h2>Constraint Resolution Implementation Details</h2>

<h3>ValidationErrorResolver Core Logic</h3>
<div class="technical-detail">
    <h4>Key Implementation Methods:</h4>
    <div class="code-block">
```

public ErrorContext resolveError(FieldError error, Locale locale, String location) {
// 1. Extract constraint type from Spring’s FieldError
String constraintType = extractConstraintType(error);

```
// 2. Map constraint to business error type via YAML config
String errorType = validationProperties.getConstraintMappings()
    .getOrDefault(constraintType, "default");

// 3. Retrieve error configuration
ErrorConfig errorConfig = validationProperties.getErrors()
    .getOrDefault(errorType, validationProperties.getErrors().get("default"));

// 4. Build message arguments from FieldError context
String[] messageArgs = buildMessageArguments(error, errorType);

// 5. Resolve localized message
String message = messageSource.getMessage(
    errorConfig.getMessageKey(), 
    messageArgs, 
    locale
);

// 6. Construct ErrorContext with business error code
return ErrorContext.builder()
    .code(Integer.parseInt(errorConfig.getCode()))
    .message(message)
    .location(location)
    .build();
```

}
</div>
</div>

```
<h3>Constraint Type Extraction Logic</h3>
<div class="config-connection">
    <p><strong>Implementation Strategy:</strong> The framework analyzes Spring's FieldError codes to determine the specific constraint violation, then applies configuration-driven mapping to business error types.</p>
    
    <table class="config-table">
        <thead>
            <tr>
                <th>Spring Constraint Code</th>
                <th>Configuration Mapping</th>
                <th>Business Error Type</th>
                <th>Error Code</th>
                <th>Message Key</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>NotNull</td>
                <td>constraint-mappings["NotNull"]</td>
                <td>"mandatory"</td>
                <td>10001</td>
                <td>validation.mandatory</td>
            </tr>
            <tr>
                <td>Size.min</td>
                <td>constraint-mappings["Size.min"]</td>
                <td>"min-length"</td>
                <td>10002</td>
                <td>validation.length.min</td>
            </tr>
            <tr>
                <td>DecimalMin</td>
                <td>constraint-mappings["DecimalMin"]</td>
                <td>"decimal-min"</td>
                <td>10100</td>
                <td>validation.decimal.min</td>
            </tr>
            <tr>
                <td>Pattern</td>
                <td>constraint-mappings["Pattern"]</td>
                <td>"bad-format"</td>
                <td>10103</td>
                <td>validation.format.invalid</td>
            </tr>
        </tbody>
    </table>
</div>

<h2>OpenAPI Integration Mechanics</h2>
<div class="implementation-box">
    <h3>Code Generation Integration Flow</h3>
    <p>The framework leverages OpenAPI constraint definitions through the automatic code generation process, requiring no additional configuration for standard validation scenarios.</p>
    
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
        <div>
            <h4>OpenAPI Specification Example</h4>
            <div class="code-block">
```

CustomerRequest:
required: [name, email]
properties:
name:
type: string
minLength: 5
maxLength: 50
email:
type: string
format: email
amount:
type: number
minimum: 0
maximum: 10000
</div>
</div>

```
        <div>
            <h4>Generated Java Model</h4>
            <div class="code-block">
```

public class CustomerRequest {
@NotNull
@Size(min = 5, max = 50)
private String name;

```
@NotNull
@Email
private String email;

@DecimalMin("0")
@DecimalMax("10000")
private BigDecimal amount;
```

}
</div>
</div>
</div>

```
    <div class="config-connection">
        <strong>Automatic Resolution:</strong> When validation fails on generated models, ValidationErrorResolver automatically translates the constraint violations (@Size, @Email, @DecimalMin) into appropriate business error codes using the constraint-mappings configuration, requiring zero additional setup.
    </div>
</div>

<h2>Implementation Limitations & Current Behavior</h2>

<div class="known-issue">
    <h3>Enum Validation Sequencing</h3>
    <p><strong>Current Implementation Behavior:</strong> HttpMessageNotReadableException occurs during Jackson JSON deserialization phase, preventing Spring Bean Validation framework from executing when invalid enum values are encountered.</p>
    <p><strong>Technical Constraint:</strong> JSON parsing failure terminates request processing before bean validation annotations can be evaluated, resulting in single-error responses for enum violations.</p>
</div>

<div class="known-issue">
    <h3>Multi-Layer Validation Coordination</h3>
    <p><strong>Implementation Reality:</strong> Spring framework processes header validation and request body validation in separate pipeline phases, making error aggregation across these layers architecturally challenging.</p>
    <p><strong>Current Approach:</strong> Sequential error discovery across validation layers, with each layer processed independently through the ValidationErrorResolver.</p>
</div>

<div class="known-issue">
    <h3>Exception Type Handling Variations</h3>
    <p><strong>Spring Framework Behavior:</strong> Both ConstraintViolationException and MethodArgumentNotValidException can be thrown for similar validation scenarios, depending on the specific validation context and configuration.</p>
    <p><strong>Implementation Response:</strong> Unified exception handling through common processing methods in ValidationErrorResolver, ensuring consistent error response format regardless of exception type.</p>
</div>

<h2>Message Internationalization Implementation</h2>
<div class="technical-detail">
    <h3>Multi-Language Support Architecture</h3>
    <p>The framework integrates with Spring's MessageSource to provide locale-specific error messages, supporting multiple language configurations through standard properties file conventions.</p>
    
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;">
        <div>
            <h4>messages.properties (Default English)</h4>
            <div class="code-block">
```

validation.mandatory={0} must be present
validation.length.min={0} length must be greater than {1} characters
validation.decimal.min={0} value must be greater than {1}
validation.format.invalid={0} value must be in the expected format
</div>
</div>

```
        <div>
            <h4>messages_es.properties (Spanish)</h4>
            <div class="code-block">
```

validation.mandatory={0} debe estar presente
validation.length.min={0} longitud debe ser mayor que {1} caracteres
validation.decimal.min={0} valor debe ser mayor que {1}
validation.format.invalid={0} valor debe estar en el formato esperado
</div>
</div>
</div>

```
    <div class="config-connection">
        <strong>Locale Resolution:</strong> Framework automatically detects request locale through Accept-Language headers or explicit locale parameters, selecting appropriate message templates during error context construction.
    </div>
</div>

<div class="implementation-box" style="margin-top: 40px;">
    <h3>Implementation Summary</h3>
    <p>This validation framework demonstrates a configuration-driven approach to error handling that separates constraint detection logic from business error mapping and message resolution. The two-file configuration system (validation-error-config.yml + messages.properties) enables flexible error code management and internationalization without requiring code changes.</p>
    
    <p><strong>Key Implementation Components:</strong></p>
    <ul>
        <li><strong>ValidationErrorResolver:</strong> Central orchestration component handling all exception types</li>
        <li><strong>ValidationProperties:</strong> Configuration binding for YAML-defined error mappings</li>
        <li><strong>MessageSource Integration:</strong> Spring-standard internationalization support</li>
        <li><strong>Location Detection:</strong> Annotation-based parameter source identification</li>
        <li><strong>OpenAPI Compatibility:</strong> Seamless integration with code-generated validation models</li>
    </ul>
</div>
```

</body>
</html>